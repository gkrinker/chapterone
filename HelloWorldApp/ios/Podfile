require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'ChapterOne' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['SWIFT_VERSION'] = '5.0'
        
        # Fix for OpenGLES module issue
        if config.build_settings['HEADER_SEARCH_PATHS']
          config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)', '${PODS_ROOT}/Headers/Public/**']
        else
          config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)', '${PODS_ROOT}/Headers/Public/**']
        end
        
        # Disable module explicitly for problematic modules
        config.build_settings['CLANG_ENABLE_MODULES'] = 'NO'
        
        # Required minimum iOS deployment target
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      end
    end

    # Disable problematic modules that fail to build
    installer.pods_project.targets.each do |target|
      if ['libdav1d', 'libavif', 'SDWebImageAVIFCoder'].include? target.name
        target.build_configurations.each do |config|
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FORCE_DISABLE_LIB=1'
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        end
      end
      
      # Set default C++ standard library
      target.build_configurations.each do |config|
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        
        # Fix header search paths
        if config.build_settings['HEADER_SEARCH_PATHS']
          config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)', '${PODS_ROOT}/Headers/Public/**']
        end
        
        # Ensure minimum iOS version is consistent
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      end
    end

    # Specific fix for OpenGLES module issue
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Disable OpenGLES module
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GLTYPES_DEFINED=1'
        
        # Explicitly exclude problematic headers
        if config.build_settings['OTHER_CPLUSPLUSFLAGS']
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = "#{config.build_settings['OTHER_CPLUSPLUSFLAGS']} -DGL_SILENCE_DEPRECATION"
        else
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = "-DGL_SILENCE_DEPRECATION"
        end
      end
    end

    # Completely disable problematic libraries for simulator builds
    installer.pods_project.targets.each do |target|
      if ['libdav1d', 'libavif', 'SDWebImageAVIFCoder'].include? target.name
        target.build_configurations.each do |config|
          # Exclude these targets from simulator builds
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64 x86_64'
          
          # Set preprocessor definition to disable these libraries
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FORCE_DISABLE_LIB=1'
          
          # Skip building these targets for simulator
          if config.build_settings['SDKROOT'] && config.build_settings['SDKROOT'].include?('simulator')
            config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
            config.build_settings['ENABLE_BITCODE'] = 'NO'
            config.build_settings['VALID_ARCHS'] = ''
          end
        end
      end
    end
  end
end
